generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  firstName             String?
  lastName              String?
  createdAt             DateTime               @default(now())
  role                  Role                   @default(APPLICANT)
  password              String
  thinkific_user_id     String?
  middleName            String?
  type                  RegistrationType?
  accounts              Account[]
  assessment            Assessment?
  receivedNotifications Notification[]         @relation("ReceivedNotifications")
  sentNotifications     Notification[]         @relation("SentNotifications")
  profile               Profile?
  reports               Report[]
  seatBooking           SeatBooking[]
  sessions              Session[]
  sentStaffAlerts       StaffAlert[]           @relation("SentStaffAlerts")
  StaffAlertRecipients  StaffAlertRecipients[]
  userCohort            UserCohort[]
}

model Profile {
  id                    String                    @id @default(cuid())
  userId                String                    @unique
  taftaCenter           String?
  homeAddress           String?
  zipCode               String?
  phoneNumber           String?
  gender                Gender?
  ageRange              String?
  stateOfResidence      String?
  dob                   DateTime?
  communityArea         CommunityArea?
  disability            String?
  educationLevel        EducationLevel?
  source                String?
  employmentStatus      String?
  residencyStatus       String?
  selfEmployedType      String?
  stateOfOrigin         String?
  lGADetails            String?
  LGADetails            String?
  businessName          String?
  businessSupport       String[]
  businessSupportNeeds  String[]
  businessType          BusinessType?
  currentSalary         Float?
  jobReadiness          String[]
  registrationMode      String?
  registrationPath      RegistrationType          @default(INDIVIDUAL)
  registrationType      BusinessRegistrationType?
  revenueRange          String?
  salaryExpectation     Float?
  talpOther             String?
  talpParticipation     Boolean?
  talpType              String?
  type                  RegistrationType          @default(INDIVIDUAL)
  internshipProgram     InternshipProgramOption?
  projectType           ProjectTypeOption?
  cohortId              String?
  selectedCourse        String?
  selectedCourseId      String?
  selectedCourseName    String?
  additionalPhoneNumber String?
  businessLGA           String?
  businessPartners      String?
  businessSector        String?
  businessSize          BusinessSize?
  businessState         String?
  companyEmail          String?
  companyPhoneNumber    String?
  countryOfBusiness     String?
  salaryRange           String?
  employmentSector      String?
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  referrer              Referrer?
}

model Enrollment {
  uid                  String     @id @default(cuid())
  id                   BigInt?    @unique
  created_at           DateTime   @default(now())
  expiry_date          DateTime?
  user_id              BigInt?
  course_name          String
  course_id            BigInt
  completed_at         DateTime?
  expired              Boolean?
  is_free_trial        Boolean?
  completed            Boolean?
  started_at           DateTime?
  activated_at         DateTime?
  updated_at           DateTime?
  enrolled             Boolean    @default(false)
  userCohortId         String
  percentage_completed Float?
  userCohort           UserCohort @relation(fields: [userCohortId], references: [id], onDelete: Cascade)

  @@index([id, course_id])
}

model Cohort {
  id               String             @id @default(cuid())
  start_date       DateTime
  end_date         DateTime
  active           Boolean            @default(true)
  color            String
  name             String
  cohortCourses    CohortCourse[]
  notifications    Notification[]
  reports          Report[]
  userCohort       UserCohort[]
  CohortToLocation CohortToLocation[]
}

model UserCohort {
  id          String       @id @default(cuid())
  userId      String
  cohortId    String
  locationId  String?
  created_at  DateTime     @default(now())
  enrollments Enrollment[]
  cohort      Cohort       @relation(fields: [cohortId], references: [id])
  location    Location?    @relation(fields: [locationId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  uid             String         @id @default(cuid())
  id              BigInt         @unique
  created_at      DateTime       @default(now())
  active          Boolean?
  course_capacity Int?
  course_colour   String?
  description     String?
  name            String
  slug            String?
  cohortCourse    CohortCourse[]
}

model CohortCourse {
  id                     String                   @id @default(cuid())
  cohortId               String
  courseId               String
  course_limit           Int?
  course_id              BigInt
  cohort                 Cohort                   @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  course                 Course                   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CohortCourseToLocation CohortCourseToLocation[]
}

model Location {
  id                     String                   @id @default(cuid())
  location               String
  seats                  Int?
  name                   String
  seatBooking            SeatBooking[]
  userCohorts            UserCohort[]
  CohortCourseToLocation CohortCourseToLocation[]
  CohortToLocation       CohortToLocation[]
}

model SeatBooking {
  id         String   @id @default(cuid())
  userId     String
  seatNumber Int
  locationId String
  Date       DateTime
  timeslot   Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([seatNumber, locationId, Date, timeslot])
}

model Referrer {
  id          String   @id @default(cuid())
  profileId   String?  @unique
  fullName    String
  phoneNumber String
  profile     Profile? @relation(fields: [profileId], references: [id])
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  user_email  String
  cohortId    String
  files       String[]
  created_at  DateTime @default(now())
  cohort      Cohort   @relation(fields: [cohortId], references: [id])
  user        User     @relation(fields: [user_email], references: [email])
}

model RehydrationDate {
  id               String   @id @default(cuid())
  created_at       DateTime @default(now())
  enrollment_count Int
  duration         Int?
  error            String?
  status           String   @default("completed")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Notification {
  id              String             @id @default(cuid())
  title           String
  message         String
  createdAt       DateTime           @default(now())
  isRead          Boolean            @default(false)
  readAt          DateTime?
  senderId        String
  recipientId     String
  type            NotificationType   @default(GENERAL)
  cohortId        String?
  relatedEntityId String?
  status          NotificationStatus @default(DRAFT)
  tags            String[]           @default([])
  cohort          Cohort?            @relation(fields: [cohortId], references: [id])
  recipient       User               @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender          User               @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
}

model Assessment {
  id                         String   @id @default(cuid())
  userId                     String   @unique
  courseOfStudy              String?
  enrollmentStatus           String?
  hadJobBeforeAdmission      Boolean?
  employmentStatus           String?
  employmentType             String?
  workTimeType               String?
  employedInCreativeSector   Boolean?
  creativeJobNature          String?
  nonCreativeJobInfo         String?
  yearsOfExperienceCreative  String?
  satisfactionLevel          String?
  skillRating                String?
  monthlyIncome              String?
  hasReliableIncome          Boolean?
  earningMeetsNeeds          Boolean?
  workIsDecentAndGood        Boolean?
  jobGivesPurpose            Boolean?
  feelRespectedAtWork        Boolean?
  lmsPlatformRating          String?
  taftaPreparationRating     String?
  preparationFeedback        String?
  qualityOfInteractionRating String?
  trainingMaterialsRating    String?
  topicSequencingRating      String?
  facilitatorsResponseRating String?
  wouldRecommendTafta        Boolean?
  improvementSuggestions     String?
  mostStrikingFeature        String?
  turnOffs                   String?
  practicalClassChallenges   String?
  onlineClassChallenges      String?
  completionMotivation       String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CohortCourseToLocation {
  A            String
  B            String
  CohortCourse CohortCourse @relation(fields: [A], references: [id], onDelete: Cascade)
  Location     Location     @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B])
  @@index([B], map: "_CohortCourseToLocation_B_index")
  @@map("_CohortCourseToLocation")
}

model CohortToLocation {
  A        String
  B        String
  Cohort   Cohort   @relation(fields: [A], references: [id], onDelete: Cascade)
  Location Location @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B])
  @@index([B], map: "_CohortToLocation_B_index")
  @@map("_CohortToLocation")
}

model StaffAlert {
  id                   String                 @id @default(cuid())
  title                String
  message              String
  type                 StaffAlertType
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  senderId             String
  sender               User                   @relation("SentStaffAlerts", fields: [senderId], references: [id])
  StaffAlertRecipients StaffAlertRecipients[]

  @@index([createdAt])
  @@index([senderId])
  @@index([type])
}

model StaffAlertRecipients {
  id           String     @id
  staffAlertId String
  userId       String
  createdAt    DateTime   @default(now())
  StaffAlert   StaffAlert @relation(fields: [staffAlertId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([staffAlertId, userId])
  @@index([staffAlertId])
  @@index([userId])
}

view EnrollmentCompletionGraph {
  id    BigInt    @unique
  date  DateTime? @db.Date
  count BigInt
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view geography_columns {
  f_table_catalog    Unsupported("name")?
  f_table_schema     Unsupported("name")?
  f_table_name       Unsupported("name")?
  f_geography_column Unsupported("name")?
  coord_dimension    Int?
  srid               Int?
  type               String?

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view geometry_columns {
  f_table_catalog   String?              @db.VarChar(256)
  f_table_schema    Unsupported("name")?
  f_table_name      Unsupported("name")?
  f_geometry_column Unsupported("name")?
  coord_dimension   Int?
  srid              Int?
  type              String?              @db.VarChar(30)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view raster_columns {
  r_table_catalog  Unsupported("name")?
  r_table_schema   Unsupported("name")?
  r_table_name     Unsupported("name")?
  r_raster_column  Unsupported("name")?
  srid             Int?
  scale_x          Float?
  scale_y          Float?
  blocksize_x      Int?
  blocksize_y      Int?
  same_alignment   Boolean?
  regular_blocking Boolean?
  num_bands        Int?
  pixel_types      String[]
  nodata_values    Float[]
  out_db           Boolean[]
  extent           Unsupported("geometry")?
  spatial_index    Boolean?

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view raster_overviews {
  o_table_catalog Unsupported("name")?
  o_table_schema  Unsupported("name")?
  o_table_name    Unsupported("name")?
  o_raster_column Unsupported("name")?
  r_table_catalog Unsupported("name")?
  r_table_schema  Unsupported("name")?
  r_table_name    Unsupported("name")?
  r_raster_column Unsupported("name")?
  overview_factor Int?

  @@ignore
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  APPLICANT
  SUPPORT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CommunityArea {
  URBAN
  RURAL
  PERI_URBANS
}

enum EducationLevel {
  ELEMENTRY_SCHOOL
  SECONDARY_SCHOOL
  COLLEGE_OF_EDUCATION
  ND_HND
  BSC
  MSC
  PHD
}

enum InternshipProgramOption {
  TheatreGroup
  ShortFilm
  MarketingCommunication
  CreativeManagementConsultant
  SponsorshipMarketers
  ContentCreationSkits
}

enum ProjectTypeOption {
  GroupInternship
  IndividualInternship
  CorporateInternship
}

enum RegistrationType {
  INDIVIDUAL
  ENTERPRISE
}

enum BusinessType {
  INFORMAL
  STARTUP
  FORMAL_EXISTING
}

enum BusinessRegistrationType {
  CAC
  SMEDAN
}

enum BusinessSize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum NotificationType {
  GENERAL
  ENROLLMENT
  COURSE_UPDATE
  ANNOUNCEMENT
  REMINDER
  APPROVAL
}

enum NotificationStatus {
  DRAFT
  SENT
  DELIVERED
  FAILED
  ARCHIVED
}

enum StaffAlertType {
  INFO
  WARNING
  ALERT
}
